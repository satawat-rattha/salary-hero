openapi: 3.0.3
info:
  title: Salary Hero API
  version: 1.0.0
servers:
  - url: http://localhost:3000
tags:
  - name: auth
    description: Authentication Service
  - name: company
    description: Company Service
  - name: admin
    description: Admin Service
  - name: employee
    description: Employee Service
  - name: request
    description: Request Service
paths:
  /login:
    post:
      tags:
        - auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: admin
                password:
                  type: string
                  example: admin
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: number
                    example: 1
                  username:
                    type: string
                  role:
                    type: number
                    example: 1
                  token:
                    type: string
  /companies/{id}:
    get:
      tags:
        - company
      summary: Get company
      parameters:
        - name: id
          in: path
          description: ID of company
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Company"
        "400":
          description: Invalid ID supplied
        "404":
          description: Company not found
      security:
        - bearerAuth: []
  /companies/create:
    post:
      tags:
        - company
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Company"
  /companies/{id}/update:
    post:
      tags:
        - company
      parameters:
        - name: id
          in: path
          description: ID of company
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Company"
  /companies/{id}/add-admin:
    post:
      tags:
        - company
      parameters:
        - name: id
          in: path
          description: ID of company
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Admin"
  /companies/{id}/delete:
    post:
      tags:
        - company
      parameters:
        - name: id
          in: path
          description: ID of company
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Success
  /admins/{id}:
    get:
      tags:
        - admin
      summary: Get admin
      parameters:
        - name: id
          in: path
          description: ID of admin
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Admin"
        "400":
          description: Invalid ID supplied
        "404":
          description: Admin not found
      security:
        - bearerAuth: []
  /admins/create:
    post:
      tags:
        - admin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                companyId:
                  type: number
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Admin"
  /admins/{id}/update:
    post:
      tags:
        - admin
      parameters:
        - name: id
          in: path
          description: ID of admin
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                companyId:
                  type: number
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Admin"
  /admins/{id}/delete:
    post:
      tags:
        - admin
      parameters:
        - name: id
          in: path
          description: ID of admin
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Success
  /employees/{id}:
    get:
      tags:
        - employee
      summary: Get employee
      parameters:
        - name: id
          in: path
          description: ID of employee
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Employee"
        "400":
          description: Invalid ID supplied
        "404":
          description: Employee not found
      security:
        - bearerAuth: []
  /employees/create:
    post:
      tags:
        - employee
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                citizenId:
                  type: string
                firstname:
                  type: string
                lastname:
                  type: string
                password:
                  type: string
                companyId:
                  type: number
                salary:
                  type: number
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Employee"
  /employees/import:
    post:
      tags:
        - employee
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                companyId:
                  type: number
                data:
                  type: array
                  items:
                    type: object
                    properties:
                      citizenId:
                        type: string
                      firstname:
                        type: string
                      lastname:
                        type: string
                      password:
                        type: string
                      salary:
                        type: number
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Employee"
  /employees/{id}/update:
    post:
      tags:
        - employee
      parameters:
        - name: id
          in: path
          description: ID of employee
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                citizenId:
                  type: string
                firstname:
                  type: string
                lastname:
                  type: string
                password:
                  type: string
                companyId:
                  type: number
                salary:
                  type: number
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Employee"
  /employees/{id}/delete:
    post:
      tags:
        - employee
      parameters:
        - name: id
          in: path
          description: ID of employee
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Success
  /requests:
    post:
      tags:
        - request
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: number
                  employeeId:
                    type: number
                  companyId:
                    type: number
                  requestedDate:
                    type: string
                  amount:
                    type: number
components:
  schemas:
    Employee:
      type: object
      properties:
        id:
          type: number
        citizenId:
          type: number
        firstname:
          type: string
        lastname:
          type: string
        username:
          type: string
        password:
          type: string
        companyId:
          type: number
        salary:
          type: number
    Admin:
      type: object
      properties:
        id:
          type: number
        username:
          type: string
        companyId:
          type: number
    Company:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
    Auth:
      type: object
      properties:
        username:
          type: string
          example: admin
        password:
          type: string
          example: admin
      xml:
        name: auth
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT # optional, arbitrary value for documentation purposes
